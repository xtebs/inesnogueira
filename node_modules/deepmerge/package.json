{
  "_args": [
    [
      {
        "raw": "deepmerge@^2.0.1",
        "scope": null,
        "escapedName": "deepmerge",
        "name": "deepmerge",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/material-ui"
    ]
  ],
  "_from": "deepmerge@>=2.0.1 <3.0.0",
  "_id": "deepmerge@2.0.1",
  "_inCache": true,
  "_location": "/deepmerge",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/deepmerge-2.0.1.tgz_1509561453146_0.15830875374376774"
  },
  "_npmUser": {
    "name": "tehshrike",
    "email": "me@JoshDuff.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "deepmerge@^2.0.1",
    "scope": null,
    "escapedName": "deepmerge",
    "name": "deepmerge",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-ui"
  ],
  "_resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-2.0.1.tgz",
  "_shasum": "25c1c24f110fb914f80001b925264dd77f3f4312",
  "_shrinkwrap": null,
  "_spec": "deepmerge@^2.0.1",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/material-ui",
  "author": {
    "name": "Nick Fisher"
  },
  "bugs": {
    "url": "https://github.com/KyleAMathews/deepmerge/issues"
  },
  "dependencies": {},
  "description": "A library for deep (recursive) merging of Javascript objects",
  "devDependencies": {
    "is-mergeable-object": "1.1.0",
    "jsmd": "0.3.1",
    "rollup": "0.49.3",
    "rollup-plugin-commonjs": "8.2.1",
    "rollup-plugin-node-resolve": "3.0.0",
    "tap": "~7.1.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-VIPwiMJqJ13ZQfaCsIFnp5Me9tnjURiaIFxfz7EH0Ci0dTSQpZtSLrqOicXqEd/z2r+z+Klk9GzmnRsgpgbOsQ==",
    "shasum": "25c1c24f110fb914f80001b925264dd77f3f4312",
    "tarball": "https://registry.npmjs.org/deepmerge/-/deepmerge-2.0.1.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "3ab89f2d2c938fc2e045c4ba822da0ffb81e4891",
  "homepage": "https://github.com/KyleAMathews/deepmerge",
  "keywords": [
    "merge",
    "deep",
    "extend",
    "copy",
    "clone",
    "recursive"
  ],
  "license": "MIT",
  "main": "dist/umd.js",
  "maintainers": [
    {
      "name": "tehshrike",
      "email": "me@JoshDuff.com"
    },
    {
      "name": "kylemathews",
      "email": "mathews.kyle@gmail.com"
    }
  ],
  "module": "dist/es.js",
  "name": "deepmerge",
  "optionalDependencies": {},
  "readme": "deepmerge\n=========\n\n> ~554B gzipped, ~1.10KiB minified\n\nMerge the enumerable attributes of two objects deeply.\n\n[***Check out the changes from version 1.x to 2.0.0***](https://github.com/KyleAMathews/deepmerge/blob/master/changelog.md#200)\n\nFor the old array element-merging algorithm, see [the `arrayMerge` option below](#arraymerge).\n\nexample\n=======\n\n<!--js\nvar merge = require('./')\n-->\n\n```js\nvar x = {\n\tfoo: { bar: 3 },\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}]\n}\n\nvar y = {\n\tfoo: { baz: 4 },\n\tquux: 5,\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}]\n}\n\nvar expected = {\n\tfoo: {\n\t\tbar: 3,\n\t\tbaz: 4\n\t},\n\tarray: [{\n\t\tdoes: 'work',\n\t\ttoo: [ 1, 2, 3 ]\n\t}, {\n\t\tdoes: 'work',\n\t\ttoo: [ 4, 5, 6 ]\n\t}, {\n\t\treally: 'yes'\n\t}],\n\tquux: 5\n}\n\nmerge(x, y) // => expected\n```\n\nmethods\n=======\n\n```\nvar merge = require('deepmerge')\n```\n\nmerge(x, y, [options])\n-----------\n\nMerge two objects `x` and `y` deeply, returning a new merged object with the\nelements from both `x` and `y`.\n\nIf an element at the same key is present for both `x` and `y`, the value from\n`y` will appear in the result.\n\nMerging creates a new object, so that neither `x` or `y` are be modified.\n\nmerge.all(arrayOfObjects, [options])\n-----------\n\nMerges any number of objects into a single result object.\n\n```js\nvar x = { foo: { bar: 3 } }\nvar y = { foo: { baz: 4 } }\nvar z = { bar: 'yay!' }\n\nvar expected = { foo: { bar: 3, baz: 4 }, bar: 'yay!' }\n\nmerge.all([x, y, z]) // => expected\n```\n\n### options\n\n#### arrayMerge\n\nThe merge will also concatenate arrays and merge array values by default.\n\nHowever, there are nigh-infinite valid ways to merge arrays, and you may want to supply your own.  You can do this by passing an `arrayMerge` function as an option.\n\n```js\nfunction overwriteMerge(destinationArray, sourceArray, options) {\n\treturn sourceArray\n}\nmerge(\n\t[1, 2, 3],\n\t[3, 2, 1],\n\t{ arrayMerge: overwriteMerge }\n) // => [3, 2, 1]\n```\n\nTo prevent arrays from being merged:\n\n```js\nconst dontMerge = (destination, source) => source\nconst output = merge({ coolThing: [1,2,3] }, { coolThing: ['a', 'b', 'c'] }, { arrayMerge: dontMerge })\noutput // => { coolThing: ['a', 'b', 'c'] }\n```\n\nTo use the old (pre-version-2.0.0) array merging algorithm, pass in this function:\n\n```js\nconst isMergeableObject = require('is-mergeable-object')\nconst emptyTarget = value => Array.isArray(value) ? [] : {}\nconst clone = (value, options) => merge(emptyTarget(value), value, options)\n\nfunction oldArrayMerge(target, source, optionsArgument) {\n\tconst destination = target.slice()\n\n\tsource.forEach(function(e, i) {\n\t\tif (typeof destination[i] === 'undefined') {\n\t\t\tconst cloneRequested = !optionsArgument || optionsArgument.clone !== false\n\t\t\tconst shouldClone = cloneRequested && isMergeableObject(e)\n\t\t\tdestination[i] = shouldClone ? clone(e, optionsArgument) : e\n\t\t} else if (isMergeableObject(e)) {\n\t\t\tdestination[i] = merge(target[i], e, optionsArgument)\n\t\t} else if (target.indexOf(e) === -1) {\n\t\t\tdestination.push(e)\n\t\t}\n\t})\n\treturn destination\n}\n\nmerge(\n\t[{ a: true }],\n\t[{ b: true }, 'ah yup'],\n\t{ arrayMerge: oldArrayMerge }\n) // => [{ a: true, b: true }, 'ah yup']\n```\n\n#### clone\n\n*Deprecated.*\n\nDefaults to `true`.\n\nIf `clone` is `false` then child objects will be copied directly instead of being cloned.  This was the default behavior before version 2.x.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm install deepmerge\n```\n\nJust want to download the file without using any package managers/bundlers?  [Download the UMD version from unpkg.com](https://unpkg.com/deepmerge/dist/umd.js).\n\ntest\n====\n\nWith [npm](http://npmjs.org) do:\n\n```sh\nnpm test\n```\n\nlicense\n=======\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/KyleAMathews/deepmerge.git"
  },
  "scripts": {
    "build": "rollup -c",
    "test": "npm run build && tap test/*.js && jsmd readme.md"
  },
  "version": "2.0.1"
}
