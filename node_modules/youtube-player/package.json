{
  "_args": [
    [
      {
        "raw": "youtube-player@^5.4.0",
        "scope": null,
        "escapedName": "youtube-player",
        "name": "youtube-player",
        "rawSpec": "^5.4.0",
        "spec": ">=5.4.0 <6.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/react-youtube"
    ]
  ],
  "_from": "youtube-player@>=5.4.0 <6.0.0",
  "_id": "youtube-player@5.4.0",
  "_inCache": true,
  "_location": "/youtube-player",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/youtube-player-5.4.0.tgz_1496304132154_0.3066736876498908"
  },
  "_npmUser": {
    "name": "gajus",
    "email": "gajus@gajus.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "youtube-player@^5.4.0",
    "scope": null,
    "escapedName": "youtube-player",
    "name": "youtube-player",
    "rawSpec": "^5.4.0",
    "spec": ">=5.4.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-youtube"
  ],
  "_resolved": "https://registry.npmjs.org/youtube-player/-/youtube-player-5.4.0.tgz",
  "_shasum": "9e3fc8a1fcae6a6cc89140e7add7c7cd86299d6e",
  "_shrinkwrap": null,
  "_spec": "youtube-player@^5.4.0",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/react-youtube",
  "author": {
    "name": "Gajus Kuizinas",
    "email": "gajus@anuary.com",
    "url": "http://gajus.com"
  },
  "ava": {
    "babel": "inherit",
    "require": [
      "babel-register"
    ]
  },
  "bugs": {
    "url": "https://github.com/gajus/youtube-player/issues"
  },
  "dependencies": {
    "debug": "^2.6.6",
    "load-script": "^1.0.0",
    "sister": "^3.0.0"
  },
  "description": "YouTube IFrame Player API abstraction.",
  "devDependencies": {
    "ava": "^0.19.1",
    "babel-cli": "^6.24.1",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-preset-env": "1.4.0",
    "babel-register": "^6.24.1",
    "chai": "^3.5.0",
    "eslint": "^3.19.0",
    "eslint-config-canonical": "^8.2.0",
    "flow-bin": "^0.45.0",
    "flow-copy-source": "^1.1.0",
    "husky": "^0.13.3",
    "npm-watch": "^0.1.9",
    "semantic-release": "^6.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "9e3fc8a1fcae6a6cc89140e7add7c7cd86299d6e",
    "tarball": "https://registry.npmjs.org/youtube-player/-/youtube-player-5.4.0.tgz"
  },
  "gitHead": "b493e5b568b80cb26400b837ed6ded2ce656bb11",
  "homepage": "https://github.com/gajus/youtube-player#readme",
  "keywords": [
    "youtube",
    "iframe",
    "player",
    "api",
    "promise",
    "async",
    "video"
  ],
  "license": "BSD-3-Clause",
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "gajus",
      "email": "gk@anuary.com"
    }
  ],
  "name": "youtube-player",
  "optionalDependencies": {},
  "readme": "# YouTube Player\n\n[![Travis build status](http://img.shields.io/travis/gajus/youtube-player/master.svg?style=flat-square)](https://travis-ci.org/gajus/youtube-player)\n[![NPM version](http://img.shields.io/npm/v/youtube-player.svg?style=flat-square)](https://www.npmjs.org/package/youtube-player)\n[![Canonical Code Style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n[![Twitter Follow](https://img.shields.io/twitter/follow/kuizinas.svg?style=social&label=Follow)](https://twitter.com/kuizinas)\n\n* [Usage](#usage)\n  * [Events](#events)\n* [Polyfills](#polyfills)\n* [Examples](#examples)\n* [Debugging](#debugging)\n* [Download](#download)\n* [Running the Examples](#running-the-examples)\n\n`youtube-player` is an abstraction of [YouTube IFrame Player API](https://developers.google.com/youtube/iframe_api_reference) (YIPA).\n\nThe downsides of using YouTube IFrame Player API are:\n\n* Requires to define callbacks in the global scope (`window`).\n* Requires to track the state of a player (e.g. you must ensure that video player is \"ready\" before you can use the API).\n\n`youtube-player`:\n\n* Registers listeners required to establish when YIPA has been loaded.\n* Does not overwrite global YIPA callback functions.\n* Queues player API calls until when video player is \"ready\".\n\n##\n\n## Usage\n\n```js\n/**\n * @typedef options\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n * @param {Number} width\n * @param {Number} height\n * @param {String} videoId\n * @param {Object} playerVars\n * @param {Object} events\n */\n\n/**\n * @typedef YT.Player\n * @see https://developers.google.com/youtube/iframe_api_reference\n * */\n\n/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param {YT.Player|HTMLElement|String} elementId Either An existing YT.Player instance,\n * the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param {YouTubePlayer~options} options See `options` (Ignored when using an existing YT.Player instance).\n * @param {boolean} strictState A flag designating whether or not to wait for\n * an acceptable state when calling supported functions. Default: `false`.\n * See `FunctionStateMap.js` for supported functions and acceptable states.\n * @returns {Object}\n */\nimport YouTubePlayer from 'youtube-player';\n```\n\n`youtube-player` is a factory function.\n\n The resulting object exposes all [functions of an instance of `YT.Player`](https://developers.google.com/youtube/iframe_api_reference#Functions). The difference is that the function body is wrapped in a promise. This promise is resolved only when the player has finished loading and is ready to begin receiving API calls (`onReady`). Therefore, all function calls are queued and replayed only when player is ready.\n\n This encapsulation does not affect the API other than making every function return a promise.\n\n```js\nlet player;\n\nplayer = YouTubePlayer('video-player');\n\n// 'loadVideoById' is queued until the player is ready to receive API calls.\nplayer.loadVideoById('M7lc1UVf-VE');\n\n// 'playVideo' is queue until the player is ready to received API calls and after 'loadVideoById' has been called.\nplayer.playVideo();\n\n// 'stopVideo' is queued after 'playVideo'.\nplayer\n    .stopVideo()\n    .then(() => {\n        // Every function returns a promise that is resolved after the target function has been executed.\n    });\n```\n\n### Events\n\n`player.on` event emitter is used to listen to all [YouTube IFrame Player API events](https://developers.google.com/youtube/iframe_api_reference#Events), e.g.\n\n```js\nplayer.on('stateChange', (event) => {\n    // event.data\n});\n\n```\n\n`player.off` removes a previously added event listener, e.g.\n\n```js\nvar listener = player.on(/* ... */);\n\nplayer.off(listener);\n\n```\n\n## Polyfills\n\nNote that the built version does not inline polyfills.\n\nYou need to polyfill the environment locally (e.g. using a service such as https://polyfill.io/v2/docs/).\n\n## Examples\n\n* [Playing a video](./examples/src/playing-video/index.html).\n* [Multiple players](./examples/src/multiple-players/index.html).\n* [Registering events handlers](./examples/src/registering-event-handlers/index.html).\n\n## Debugging\n\n`youtube-player` is using [`debug`](https://www.npmjs.com/package/debug) module to expose debugging information.\n\nThe `debug` namespace is \"youtube-player\".\n\nTo display `youtube-player` logs configure `localStorage.debug`, e.g.\n\n```js\nlocalStorage.debug = 'youtube-player:*';\n\n```\n\n## Download\n\nUsing [NPM](https://www.npmjs.org/):\n\n```sh\nnpm install youtube-player\n```\n\n## Running the Examples\n\n```sh\nnpm install\nnpm run build\ncd ./examples\nnpm install\nnpm run start\n```\n\nThis will start a HTTP server on port 8000.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gajus/youtube-player.git"
  },
  "scripts": {
    "build": "NODE_ENV=production babel ./src --out-dir ./dist --copy-files && flow-copy-source src dist",
    "lint": "eslint ./src ./test",
    "precommit": "npm run lint && npm run test",
    "test": "NODE_ENV=development ava --verbose",
    "watch": "npm-watch"
  },
  "version": "5.4.0",
  "watch": {
    "test": "{src,test}/*.js"
  }
}
