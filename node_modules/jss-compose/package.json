{
  "_args": [
    [
      {
        "raw": "jss-compose@^5.0.0",
        "scope": null,
        "escapedName": "jss-compose",
        "name": "jss-compose",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/jss-preset-default"
    ]
  ],
  "_from": "jss-compose@>=5.0.0 <6.0.0",
  "_id": "jss-compose@5.0.0",
  "_inCache": true,
  "_location": "/jss-compose",
  "_nodeVersion": "7.10.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jss-compose-5.0.0.tgz_1506779493382_0.9283507410436869"
  },
  "_npmUser": {
    "name": "kof",
    "email": "oleg008@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jss-compose@^5.0.0",
    "scope": null,
    "escapedName": "jss-compose",
    "name": "jss-compose",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jss-preset-default"
  ],
  "_resolved": "https://registry.npmjs.org/jss-compose/-/jss-compose-5.0.0.tgz",
  "_shasum": "ce01b2e4521d65c37ea42cf49116e5f7ab596484",
  "_shrinkwrap": null,
  "_spec": "jss-compose@^5.0.0",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/jss-preset-default",
  "author": {
    "name": "Pavel Davydov",
    "email": "typical000@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/cssinjs/jss-compose/issues"
  },
  "dependencies": {
    "warning": "^3.0.0"
  },
  "description": "JSS plugin for classes composition",
  "devDependencies": {
    "babel-cli": "^6.5.1",
    "babel-core": "^6.5.1",
    "babel-eslint": "^7.0.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-rewire": "^1.0.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-stage-0": "^6.5.0",
    "cross-env": "^3.0.0",
    "eslint": "^3.6.1",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-config-jss": "^2.4.0",
    "eslint-plugin-import": "^1.12.0",
    "eslint-plugin-jsx-a11y": "^2.2.2",
    "eslint-plugin-react": "^6.3.0",
    "expect.js": "^0.3.1",
    "jss": "^9.0.0",
    "karma": "^1.1.1",
    "karma-chrome-launcher": "^2.0.0",
    "karma-coverage": "^1.1.0",
    "karma-mocha": "^1.0.1",
    "karma-mocha-reporter": "^2.0.2",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-webpack": "^1.7.0",
    "lint-staged": "^3.0.1",
    "mocha": "^3.0.2",
    "pre-commit": "^1.1.3",
    "rimraf": "^2.5.4",
    "webpack": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-YofRYuiA0+VbeOw0VjgkyO380sA4+TWDrW52nSluD9n+1FWOlDzNbgpZ/Sb3Y46+DcAbOS21W5jo6SAqUEiuwA==",
    "shasum": "ce01b2e4521d65c37ea42cf49116e5f7ab596484",
    "tarball": "https://registry.npmjs.org/jss-compose/-/jss-compose-5.0.0.tgz"
  },
  "gitHead": "c5052cb99e69a00faa556c0ca06194f1bf2b79ea",
  "homepage": "https://github.com/cssinjs/jss-compose#readme",
  "keywords": [
    "cssinnjs",
    "css-in-js",
    "css in js",
    "jss",
    "plugin",
    "compose",
    "composition"
  ],
  "license": "MIT",
  "lint-staged": {
    "./src/*.js": [
      "eslint",
      "git add"
    ]
  },
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "kof",
      "email": "oleg008@gmail.com"
    },
    {
      "name": "typical000",
      "email": "typical000@gmail.com"
    }
  ],
  "name": "jss-compose",
  "optionalDependencies": {},
  "peerDependencies": {
    "jss": "^9.0.0"
  },
  "pre-commit": "lint:staged",
  "readme": "# JSS plugin for classes composition\n\nThis plugin allows you to use CSS frameworks and legacy code together with JSS as well as reuse Rules more granularly.\n\nMake sure you read [how to use\nplugins](https://github.com/cssinjs/jss/blob/master/docs/setup.md#setup-with-plugins)\nin general.\n\n[![Gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/cssinjs/lobby)\n\n## Compose with global classes.\n\nTo combine JSS with CSS framework like [Material Design Lite](https://getmdl.io/) or [Bootstrap](http://getbootstrap.com/) and others.\n\n```javascript\nconst styles = {\n  button: {\n    // Using space separated class names.\n    composes: 'btn btn-primary',\n    color: 'red'\n  }\n  buttonActive: {\n    // Using an array of class names.\n    composes: ['btn', 'btn-primary'],\n    color: 'blue'\n  }\n}\n```\nCompiles to:\n\n```css\n.button-123456 {\n  color: red;\n}\n.buttonActive-123456 {\n  color: blue;\n}\n```\n\nWhen you use it:\n\n```javascript\n<button className={classes.button}>Button</button>\n<button className={classes.buttonActive}>Active Button</button>\n```\nIt renders to:\n```html\n<button class=\"button-123456 btn\">Button</button>\n<button class=\"button-123456 btn btn-primary\">Active Button</button>\n```\n\n## Compose with local classes.\n\nManage element states without rules duplication.\nTo reference a local rule, prefix the rule name with `$` symbol.\n\n```javascript\nconst styles = {\n  button: {\n    color: 'black'\n  },\n\n  // You can chain compositions\n  buttonActive: {\n    composes: '$button',\n    color: 'red'\n  },\n  buttonActiveDisabled: {\n    composes: '$buttonActive',\n    opacity: 0.5\n  },\n\n  // Or use arrays\n  disabled: {\n    opacity: 0.5\n  },\n  active: {\n    color: 'red'\n  },\n  buttonDisabled: {\n    composes: ['$button', '$active', '$disabled']\n  }\n}\n```\n\nCompiles to:\n\n```css\n.button-123456 {\n  color: black;\n}\n.buttonActive-123456 {\n  color: red;\n}\n.buttonActiveDisabled-123456 {\n  opacity: 0.5;\n}\n.disabled-123456 {\n  opacity: 0.5;\n}\n.active-123456 {\n  color: red;\n}\n/* Rule `buttonDisabled` is not compiled to CSS, because it has no own properties. */\n```\n\nWhen you use it:\n\n```javascript\n<button className={classes.buttonActiveDisabled}>Active Disabled Button</button>\n<button className={classes.buttonDisabled}>Disabled Button with active state</button>\n```\nIt renders to:\n```html\n<button class=\"button-123456 buttonActive-123456\">Active Disabled Button</button>\n<button class=\"buttonDisabled-123456 button-123456 active-123456 disabled-123456\">Disabled Button with active state</button>\n```\n\n## Mix global and local classes.\n\nYou can compose both local and global classes at the same time.\n\n```javascript\nconst styles = {\n  active: {\n    color: 'red'\n  },\n  button: {\n    composes: ['$active', 'btn', 'btn-primary'],\n    color: 'blue'\n  }\n}\n```\n\nCompiles to:\n\n```css\n.active-123456 {\n  color: red;\n}\n.button-123456 {\n  color: blue;\n}\n```\n\nWhen you use it:\n\n```javascript\n<button className={classes.button}>Button</button>\n```\nIt renders to:\n```html\n<button class=\"button-123456 active-123456 btn btn-primary\">Button</button>\n```\n\n## Caveats\n\n- Doesn't work within [global Style Sheets](https://github.com/cssinjs/jss-global).\n- Does not work inside of [nested rules](https://github.com/cssinjs/jss-nested).\n- When composing local rules, they need to be defined first. Otherwise you get wrong css selector order and specificity.\n\n## Issues\n\nFile a bug against [cssinjs/jss prefixed with \\[jss-compose\\]](https://github.com/cssinjs/jss/issues/new?title=[jss-compose]%20).\n\n## Run tests\n\n```bash\nnpm i\nnpm test\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/cssinjs/jss-compose.git"
  },
  "scripts": {
    "all": "npm run lint && npm run test && npm run build",
    "build": "npm run clean && npm run build:lib && npm run build:tests && npm run build:dist",
    "build:dist": "npm run build:dist:max && npm run build:dist:min",
    "build:dist:max": "cross-env NODE_ENV=development webpack src/index.js dist/jss-compose.js",
    "build:dist:min": "cross-env NODE_ENV=production webpack src/index.js dist/jss-compose.min.js",
    "build:lib": "babel src --out-dir lib",
    "build:tests": "npm run build:tests:lib && npm run build:tests:local",
    "build:tests:lib": "cross-env NODE_ENV=test babel src --out-dir tests",
    "build:tests:local": "cross-env NODE_ENV=test webpack src/index.test.js tmp/tests.js",
    "clean": "rimraf '{lib,dist,tests,tmp}/*'",
    "lint": "eslint ./src",
    "lint:staged": "lint-staged",
    "prepublishOnly": "npm run all",
    "test": "cross-env NODE_ENV=test karma start --single-run ",
    "test:watch": "cross-env NODE_ENV=test karma start"
  },
  "version": "5.0.0"
}
