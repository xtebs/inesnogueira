{
  "_args": [
    [
      {
        "raw": "styled-jsx@2.1.1",
        "scope": null,
        "escapedName": "styled-jsx",
        "name": "styled-jsx",
        "rawSpec": "2.1.1",
        "spec": "2.1.1",
        "type": "version"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/next"
    ]
  ],
  "_from": "styled-jsx@2.1.1",
  "_id": "styled-jsx@2.1.1",
  "_inCache": true,
  "_location": "/styled-jsx",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/styled-jsx-2.1.1.tgz_1508098247266_0.08525963802821934"
  },
  "_npmUser": {
    "name": "giuseppegurgone",
    "email": "ggurgone@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "babel-runtime": "6.26.0",
    "esutils": "2.0.2",
    "lodash": "4.17.4",
    "to-fast-properties": "1.0.3"
  },
  "_requested": {
    "raw": "styled-jsx@2.1.1",
    "scope": null,
    "escapedName": "styled-jsx",
    "name": "styled-jsx",
    "rawSpec": "2.1.1",
    "spec": "2.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/next"
  ],
  "_resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-2.1.1.tgz",
  "_shasum": "e7481c7554df50d605cdc84a4e53c58fec3449b5",
  "_shrinkwrap": null,
  "_spec": "styled-jsx@2.1.1",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/next",
  "ava": {
    "require": [
      "babel-register"
    ],
    "babel": "inherit"
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-3",
      "react"
    ],
    "plugins": [
      "transform-runtime"
    ]
  },
  "bugs": {
    "url": "https://github.com/zeit/styled-jsx/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-jsx": "6.18.0",
    "babel-types": "6.23.0",
    "convert-source-map": "1.3.0",
    "source-map": "0.5.6",
    "string-hash": "1.1.1",
    "stylis": "3.3.2",
    "stylis-rule-sheet": "0.0.6"
  },
  "description": "Full CSS support for JSX without compromises",
  "devDependencies": {
    "ava": "0.19.1",
    "babel-cli": "6.18.0",
    "babel-core": "6.18.2",
    "babel-plugin-transform-runtime": "6.15.0",
    "babel-preset-babili": "0.0.10",
    "babel-preset-es2015": "6.16.0",
    "babel-preset-react": "6.16.0",
    "babel-preset-stage-3": "6.22.0",
    "babel-register": "6.18.0",
    "benchmark": "2.1.3",
    "eslint-config-prettier": "^2.1.0",
    "gulp": "3.9.1",
    "gulp-babel": "6.1.2",
    "gulp-benchmark": "1.1.1",
    "human-size": "1.1.0",
    "husky": "^0.13.3",
    "lint-staged": "^3.4.2",
    "mz": "2.6.0",
    "prettier": "^1.5.2",
    "react": "15.6.1",
    "react-dom": "15.6.1",
    "react-jsdom": "^2.0.5",
    "xo": "0.18.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e7481c7554df50d605cdc84a4e53c58fec3449b5",
    "tarball": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-2.1.1.tgz"
  },
  "files": [
    "dist",
    "lib",
    "server.js",
    "babel.js",
    "style.js"
  ],
  "gitHead": "18bb505170329fe7dc83eed17c8df9676547597e",
  "homepage": "https://github.com/zeit/styled-jsx#readme",
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "npm run lint",
      "prettier --single-quote --no-semi --write",
      "git add"
    ]
  },
  "maintainers": [
    {
      "name": "giuseppegurgone",
      "email": "ggurgone@gmail.com"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "styled-jsx",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "15.x.x || 16.x.x"
  },
  "readme": "# styled-jsx\n\n[![Build Status](https://travis-ci.org/zeit/styled-jsx.svg?branch=master)](https://travis-ci.org/zeit/styled-jsx)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![Slack Channel](http://zeit-slackin.now.sh/badge.svg)](https://zeit.chat)\n\nFull, scoped and component-friendly CSS support for JSX (rendered on the server or the client).\n\n\n Code and docs are for v2 which we highly recommend you to try. Looking for styled-jsx v1? Switch to the [v1 branch](https://github.com/zeit/styled-jsx/tree/v1).\n\n## Usage\n\nFirstly, install the package:\n\n```bash\nnpm install --save styled-jsx\n```\n\nNext, add `styled-jsx/babel` to `plugins` in your babel configuration:\n\n```json\n{\n  \"plugins\": [\n    \"styled-jsx/babel\"\n  ]\n}\n```\n\nNow add `<style jsx>` to your code and fill it with CSS:\n\n```jsx\nexport default () => (\n  <div>\n    <p>only this paragraph will get the style :)</p>\n\n    { /* you can include <Component />s here that include\n         other <p>s that don't get unexpected styles! */ }\n\n    <style jsx>{`\n      p {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\n## Configuration\n\nThe following are optional settings for the babel plugin.\n\n#### `optimizeForSpeed`\n\nBlazing fast and optimized CSS rules injection system based on the CSSOM APIs.\n\n```\n{\n  \"plugins\": [\n    [\"styled-jsx/babel\", { \"optimizeForSpeed\": true }]\n  ]\n}\n```\nWhen in production\\* this mode is automatically enabled.<br>\nBeware that when using this option source maps cannot be generated and styles cannot be edited via the devtools.\n\n\\* `process.env.NODE_ENV === 'production'`\n\n\n#### `sourceMaps`\n\nGenerates source maps (default: `false`)\n\n#### `vendorPrefixes`\n\nTurn on/off automatic vendor prefixing (default: `true`)\n\n## Features\n\n- Full CSS support, no tradeoffs in power\n- Runtime size of just **3kb** (gzipped, from 12kb)\n- Complete isolation: Selectors, animations, keyframes\n- Built-in CSS vendor prefixing\n- Very fast, minimal and efficient transpilation (see below)\n- High-performance runtime-CSS-injection when not server-rendering\n- Future-proof: Equivalent to server-renderable \"Shadow CSS\"\n- Source maps support\n- Dynamic styles and themes support \\***new**\n- CSS Preprocessing via Plugins \\***new**\n\n## How It Works\n\nThe example above transpiles to the following:\n\n```jsx\nimport _JSXStyle from 'styled-jsx/style'\n\nexport default () => (\n  <div className='jsx-123'>\n    <p className='jsx-123'>only this paragraph will get the style :)</p>\n    <_JSXStyle styleId='123' css={`p.jsx-123 {color: red;}`} />\n  </div>\n)\n```\n\n### Why It Works Like This\n\nUnique classnames give us style encapsulation and `_JSXStyle` is heavily optimized for:\n\n- Injecting styles upon render\n- Only injecting a certain component's style once (even if the component is included multiple times)\n- Removing unused styles\n- Keeping track of styles for server-side rendering\n\n### Keeping CSS in separate files\n\nStyles can be defined in separate JavaScript modules by tagging with `css` any template literal that contain CSS.\n\n`css` must be imported from `styled-jsx/css`:\n\n```js\n/* styles.js */\nimport css from 'styled-jsx/css'\n\nexport const button = css`button { color: hotpink; }`\nexport default css`div { color: green; }`\n```\n\nimported as regular strings:\n\n```jsx\nimport styles, { button } from './styles'\n\nexport default () => (\n  <div>\n    <button>styled-jsx</button>\n    <style jsx>{styles}</style>\n    <style jsx>{button}</style>\n  </div>\n)\n```\n\nStyles are automatically scoped but you can also be consumed as [globals](#global-styles).\n\nN.B. We support CommonJS exports but you can only export one string per module:\n\n```js\nmodule.exports = css`div { color: green; }`\n\n// the following won't work\n// module.exports = { styles: css`div { color: green; }` }\n```\n\n### Targeting The Root\n\nNotice that the parent `<div>` from the example above also gets a `jsx-123` classname. We do this so that\nyou can target the \"root\" element, in the same manner that\n[`:host`](https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host) works with Shadow DOM.\n\nIf you want to target _only_ the host, we suggest you use a class:\n\n```jsx\nexport default () => (\n  <div className=\"root\">\n    <style jsx>{`\n      .root {\n        color: green;\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Global styles\n\nTo skip scoping entirely, you can make the global-ness of your styles\nexplicit by adding _global_.\n\n```jsx\nexport default () => (\n  <div>\n    <style jsx global>{`\n      body {\n        background: red\n      }\n    `}</style>\n  </div>\n)\n```\n\nThe advantage of using this over `<style>` is twofold: no need\nto use `dangerouslySetInnerHTML` to avoid escaping issues with CSS\nand take advantage of `styled-jsx`'s de-duping system to avoid\nthe global styles being inserted multiple times.\n\n### Global selectors\n\nSometimes it's useful to skip prefixing. We support `:global()`,\ninspired by [css-modules](https://github.com/css-modules/css-modules).\n\nThis is very useful in order to, for example, generate an *unprefixed class* that\nyou can pass to 3rd-party components. For example, to style\n`react-select` which supports passing a custom class via `optionClassName`:\n\n```jsx\nimport Select from 'react-select'\nexport default () => (\n  <div>\n    <Select optionClassName=\"react-select\" />\n\n    <style jsx>{`\n      /* \"div\" will be prefixed, but \".react-select\" won't */\n\n      div :global(.react-select) {\n        color: red\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Dynamic styles\n\nTo make a component's visual representation customizable from the outside world there are three options.\n\n#### Via interpolated dynamic props\n\nAny value that comes from the component's `render` method scope is treated as dynamic. This makes it possible to use `props` and `state` for example.\n\n```jsx\nconst Button = (props) => (\n  <button>\n     { props.children }\n     <style jsx>{`\n        button {\n          padding: ${ 'large' in props ? '50' : '20' }px;\n          background: ${props.theme.background};\n          color: #999;\n          display: inline-block;\n          font-size: 1em;\n        }\n     `}</style>\n  </button>\n)\n```\n\nNew styles' injection is optimized to perform well at runtime.\n\nThat said when your CSS is mostly static we recommend to split it up in static and dynamic styles and use two separate `style` tags so that, when changing, only the dynamic parts are recomputed/rendered.\n\n```jsx\nconst Button = (props) => (\n  <button>\n     { props.children }\n     <style jsx>{`\n        button {\n          color: #999;\n          display: inline-block;\n          font-size: 2em;\n        }\n     `}</style>\n     <style jsx>{`\n        button {\n          padding: ${ 'large' in props ? '50' : '20' }px;\n          background: ${props.theme.background};\n        }\n     `}</style>\n  </button>\n)\n```\n\n#### Via `className` toggling\n\nThe second option is to pass properties that toggle class names.\n\n```jsx\nconst Button = (props) => (\n  <button className={ 'large' in props && 'large' }>\n     { props.children }\n     <style jsx>{`\n        button {\n          padding: 20px;\n          background: #eee;\n          color: #999\n        }\n        .large {\n          padding: 50px\n        }\n     `}</style>\n  </button>\n)\n```\n\nThen you would use this component as either `<Button>Hi</Button>` or `<Button large>Big</Button>`.\n\n#### Via inline `style`\n\n\\***best for animations**\n\nImagine that you wanted to make the padding in the button above completely customizable. You can override the CSS you configure via inline-styles:\n\n```jsx\nconst Button = ({ padding, children }) => (\n  <button style={{ padding }}>\n     { children }\n     <style jsx>{`\n        button {\n          padding: 20px;\n          background: #eee;\n          color: #999\n        }\n     `}</style>\n  </button>\n)\n```\n\nIn this example, the padding defaults to the one set in `<style>` (`20`), but the user can pass a custom one via `<Button padding={30}>`.\n\n### Constants\n\nIt is possible to use constants like so:\n\n```jsx\nimport { colors, spacing } from '../theme'\nimport { invertColor } from '../theme/utils'\n\nconst Button = ({ children }) => (\n  <button>\n     { children }\n     <style jsx>{`\n        button {\n          padding: ${ spacing.medium };\n          background: ${ colors.primary };\n          color: ${ invertColor(colors.primary) };\n        }\n     `}</style>\n  </button>\n)\n```\n\nPlease keep in mind that constants defined outside of the component scope are treated as static styles.\n\n## Server-Side Rendering\n\n### `styled-jsx/server`\n\nThe main export flushes your styles to an array of `React.Element`:\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport flush from 'styled-jsx/server'\nimport App from './app'\n\nexport default (req, res) => {\n  const app = ReactDOM.renderToString(<App />)\n  const styles = flush()\n  const html = ReactDOM.renderToStaticMarkup(<html>\n    <head>{ styles }</head>\n    <body>\n      <div id=\"root\" dangerouslySetInnerHTML={{__html: app}} />\n    </body>\n  </html>)\n  res.end('<!doctype html>' + html)\n}\n```\n\nWe also expose `flushToHTML` to return generated HTML:\n\n```jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport { flushToHTML } from 'styled-jsx/server'\nimport App from './app'\n\nexport default (req, res) => {\n  const app = ReactDOM.renderToString(<App />)\n  const styles = flushToHTML()\n  const html = `<!doctype html>\n    <html>\n      <head>${styles}</head>\n      <body>\n        <div id=\"root\">${app}</div>\n      </body>\n    </html>`\n  res.end(html)\n}\n```\n\nIt's **paramount** that you use one of these two functions so that\nthe generated styles can be diffed when the client loads and\nduplicate styles are avoided.\n\n## CSS Preprocessing via Plugins\n\nStyles can be preprocessed via plugins.\n\nPlugins are regular JavaScript modules that export a simple function with the following signature:\n\n```js\n(css: string, options: Object) => string\n```\n\nBasically they accept a CSS string in input, optionally modify it and finally return it.\n\nPlugins make it possible to use popular preprocessors like SASS, Less, Stylus, PostCSS or apply custom transformations to the styles at **compile time**.\n\nTo register a plugin add an option `plugins` for `styled-jsx/babel` to your `.babelrc`. `plugins` must be an array of module names or *full* paths for local plugins.\n\n```json\n{\n  \"plugins\": [\n    [\n      \"styled-jsx/babel\",\n      { \"plugins\": [\"my-styled-jsx-plugin-package\", \"/full/path/to/local/plugin\"] }\n    ]\n  ]\n}\n```\n\n<details>\n  <summary>Instructions to integrate with Next.js</summary>\n  In order to register styled-jsx plugins in a Next.js app you need to create a custom .babelrc file:\n\n  ```json\n  {\n    \"presets\": [\n      [\n        \"next/babel\",\n        {\n          \"styled-jsx\": {\n            \"plugins\": [\n              \"styled-jsx-plugin-postcss\"\n            ]\n          }\n        }\n      ]\n    ]\n  }\n  ```\n\n  This is a fairly new feature so make sure that you using a version of Next.js that supports passing options to `styled-jsx`.\n</details>\n<br>\n\nPlugins are applied in definition order left to right before styles are scoped.\n\nIn order to resolve local plugins paths you can use NodeJS' [require.resolve](https://nodejs.org/api/globals.html#globals_require_resolve).\n\nN.B. when applying the plugins styled-jsx replaces template literals expressions with placeholders because otherwise CSS parsers would get invalid CSS E.g.\n\n```css\n/* `ExprNumber` is a number */\n%%styled-jsx-placeholder-ExprNumber%%\n```\n\n**Plugins won't transform expressions** (eg. dynamic styles).\n\nWhen publishing a plugin you may want to add the keywords: `styled-jsx` and `styled-jsx-plugin`.\nWe also encourage you to use the following naming convention for your plugins:\n\n```\nstyled-jsx-plugin-<your-plugin-name>\n```\n\n#### Plugin options\n\nUsers can set plugin options by registering a plugin as an array that contains\nthe plugin path and an options object.\n\n```json\n{\n  \"plugins\": [\n    [\n      \"styled-jsx/babel\",\n      {\n        \"plugins\": [\n          [\"my-styled-jsx-plugin-package\", { \"exampleOption\":  true }]\n        ],\n        \"sourceMaps\": true\n      }\n    ]\n  ]\n}\n```\n\nEach plugin receives a `options` object as second argument which contains\nthe babel and user options:\n\n```js\n(css, options) => { /* ... */ }\n```\n\nThe `options` object has the following shape:\n\n```js\n{\n  // user options go here\n  // eg. exampleOption: true\n\n  // babel options\n  babel: {\n    sourceMaps: boolean,\n    vendorPrefixes: boolean,\n    isGlobal: boolean,\n    filename: ?string, // defined only when styled-jsx/babel is used via Babel CLI,\n    location: { // the original location of the CSS block in the JavaScript file\n      start: {\n        line: number,\n        column: number,\n      },\n      end: {\n        line: number,\n        column: number,\n      }\n    }\n  }\n}\n```\n\n#### Example plugins\n\nThe following plugins are proof of concepts/sample:\n\n* [styled-jsx-plugin-sass](https://github.com/giuseppeg/styled-jsx-plugin-sass)\n* [styled-jsx-plugin-postcss](https://github.com/giuseppeg/styled-jsx-plugin-postcss)\n* [styled-jsx-plugin-stylelint](https://github.com/giuseppeg/styled-jsx-plugin-stylelint)\n\n## Syntax Highlighting\n\nWhen working with template literals a common drawback is missing syntax highlighting. The following editors currently have support for highlighting CSS inside `<style jsx>` elements.\n\n _If you have a solution for an editor not on the list_ __please [open a PR](https://github.com/zeit/styled-jsx/pull/new/master)__ _and let us now._\n\n### Atom\n\nThe [`language-babel`](https://github.com/gandm/language-babel) package for the [Atom editor](https://atom.io/) has an option to [extend the grammar for JavaScript tagged template literals](https://github.com/gandm/language-babel#javascript-tagged-template-literal-grammar-extensions).\n\nAfter [installing the package](https://github.com/gandm/language-babel#installation) add the code below to the appropriate settings entry. In a few moments you should be blessed with proper CSS syntax highlighting. ([source](https://github.com/gandm/language-babel/issues/324))\n\n```\n\"(?<=<style jsx>{)|(?<=<style jsx global>{)\":source.css.styled\n```\n\n![babel-language settings entry](https://cloud.githubusercontent.com/assets/2313237/22627258/6c97cb68-ebb7-11e6-82e1-60205f8b31e7.png)\n\n### Webstorm/Idea\n\nThe IDE let you inject any language in place with _Inject language or reference_ in an _Intention Actions_ (default _alt+enter_).\nSimply perform the action in the string template and select CSS.\nYou get full CSS highlighting and autocompletion and it will last until you close the IDE.\n\nAdditionally you can use language injection comments to enable all the IDE language features indefinitely using the language comment style:\n\n```jsx\nimport { colors, spacing } from '../theme'\nimport { invertColor } from '../theme/utils'\n\nconst Button = ({ children }) => (\n  <button>\n     { children }\n\n     { /*language=CSS*/ }\n     <style jsx>{`\n        button {\n          padding: ${ spacing.medium };\n          background: ${ colors.primary };\n          color: ${ invertColor(colors.primary) };\n        }\n     `}</style>\n  </button>\n)\n```\n\n### Emmet\n\n If you're using Emmet you can add the following snippet to `~/emmet/snippets-styledjsx.json` This will allow you to expand `style-jsx` to a styled-jsx block.\n\n ```json\n {\n  \"html\": {\n    \"snippets\": {\n      \"style-jsx\": \"<style jsx>{`\\n\\t$1\\n`}</style>\"\n    }\n  }\n}\n```\n\n### [Visual Studio Code Extension](https://marketplace.visualstudio.com/items?itemName=blanu.vscode-styled-jsx)\nLaunch VS Code Quick Open (⌘+P), paste the following command, and press enter.\n```\next install vscode-styled-jsx\n```\n#### Autocomplete\nBy now, this extension doesn't support autocomplete. However, you can install [ES6 Template Literal Editor](https://marketplace.visualstudio.com/items?itemName=plievone.vscode-template-literal-editor) extension to edit styles in another pane, and you will get full feature of css language service provided by VS Code.\n\n### Vim\n\nInstall [vim-styled-jsx](https://github.com/alampros/vim-styled-jsx) with your plugin manager of choice.\n\n## ESLint\nIf you're using `eslint-plugin-import`, the `css` import will generate errors, being that it's a \"magic\" import (not listed in package.json). To avoid these, simply add the following line to your eslint configuration:\n\n```\n\"settings\": {\"import/core-modules\": [\"styled-jsx/css\"] }\n```\n\n## Credits\n\n- **Pedram Emrouznejad** ([rijs](https://github.com/rijs/fullstack)) suggested attribute selectors over my initial class prefixing idea.\n- **Sunil Pai** ([glamor](https://github.com/threepointone/glamor)) inspired the use of `murmurhash2` (minimal and fast hashing) and an efficient style injection logic.\n- **Sultan Tarimo** built [stylis.js](https://github.com/thysultan), a super fast and tiny CSS parser and compiler.\n- **Max Stoiber** ([styled-components](https://github.com/styled-components)) proved the value of retaining the familiarity of CSS syntax and pointed me to the very efficient [stylis](https://github.com/thysultan/stylis.js) compiler (which we forked to very efficiently append attribute selectors to the user's css)\n- **Yehuda Katz** ([ember](https://github.com/emberjs)) convinced me on Twitter to transpile CSS as an alternative to CSS-in-JS.\n- **Evan You** ([vuejs](https://github.com/vuejs)) discussed his Vue.js CSS transformation with me.\n- **Henry Zhu** ([babel](https://github.com/babel)) helpfully pointed me to some important areas of the babel plugin API.\n\n## Authors\n\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [▲ZEIT](https://zeit.co)\n- Naoyuki Kanezawa ([@nkzawa](https://twitter.com/nkzawa)) - [▲ZEIT](https://zeit.co)\n- Giuseppe Gurgone ([@giuseppegurgone](https://twitter.com/giuseppegurgone))\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/styled-jsx.git"
  },
  "scripts": {
    "dev": "gulp",
    "format": "prettier --single-quote --no-semi --write *.js {src,test}/*.js",
    "lint": "xo",
    "precommit": "xo --quiet && lint-staged",
    "prepublish": "gulp transpile",
    "start": "node server.js",
    "test": "npm run lint && ava"
  },
  "version": "2.1.1",
  "xo": {
    "envs": [
      "node",
      "browser"
    ],
    "extends": "prettier",
    "ignores": [
      "lib/style-transform.js"
    ],
    "rules": {
      "capitalized-comments": 0
    }
  }
}
