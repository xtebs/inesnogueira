{
  "_args": [
    [
      {
        "raw": "@semantic-release/release-notes-generator@^4.0.0",
        "scope": "@semantic-release",
        "escapedName": "@semantic-release%2frelease-notes-generator",
        "name": "@semantic-release/release-notes-generator",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/semantic-release"
    ]
  ],
  "_from": "@semantic-release/release-notes-generator@>=4.0.0 <5.0.0",
  "_id": "@semantic-release/release-notes-generator@4.0.5",
  "_inCache": true,
  "_location": "/@semantic-release/release-notes-generator",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/release-notes-generator-4.0.5.tgz_1506893384634_0.7189818671904504"
  },
  "_npmUser": {
    "name": "semantic-release-bot",
    "email": "semantic-release@boennemann.me"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@semantic-release/release-notes-generator@^4.0.0",
    "scope": "@semantic-release",
    "escapedName": "@semantic-release%2frelease-notes-generator",
    "name": "@semantic-release/release-notes-generator",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/semantic-release"
  ],
  "_resolved": "https://registry.npmjs.org/@semantic-release/release-notes-generator/-/release-notes-generator-4.0.5.tgz",
  "_shasum": "46cc2f16bdb60fe9674bbcd616bfe0f8bb35347c",
  "_shrinkwrap": null,
  "_spec": "@semantic-release/release-notes-generator@^4.0.0",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/semantic-release",
  "author": {
    "name": "Pierre Vanduynslager"
  },
  "authors": [
    "Stephan BÃ¶nnemann <stephan@boennemann.me> (http://boennemann.me)",
    "Gregor Martynus (https://twitter.com/gr2m)",
    "Pierre Vanduynslager (https://twitter.com/PierreAtHome)"
  ],
  "bugs": {
    "url": "https://github.com/semantic-release/release-notes-generator/issues"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "dependencies": {
    "@semantic-release/error": "^2.0.0",
    "conventional-changelog-angular": "^1.4.0",
    "conventional-changelog-core": "^1.9.0",
    "get-stream": "^3.0.0",
    "import-from": "^2.1.0",
    "lodash": "^4.17.4",
    "pify": "^3.0.0"
  },
  "description": "Customizable release-notes-generator plugin for semantic-release",
  "devDependencies": {
    "@commitlint/cli": "^3.1.2",
    "@commitlint/config-angular": "^3.1.1",
    "ava": "^0.22.0",
    "codecov": "^2.3.0",
    "commitizen": "^2.9.6",
    "conventional-changelog-atom": "^0.1.1",
    "conventional-changelog-ember": "^0.2.6",
    "conventional-changelog-eslint": "^0.2.0",
    "conventional-changelog-express": "^0.2.0",
    "conventional-changelog-jshint": "^0.2.0",
    "cz-conventional-changelog": "^2.0.0",
    "eslint": "^4.5.0",
    "eslint-config-prettier": "^2.3.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-prettier": "^2.3.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "execa": "^0.8.0",
    "fs-extra": "^4.0.1",
    "husky": "^0.14.3",
    "nyc": "^11.1.0",
    "p-each-series": "^1.0.0",
    "prettier": "^1.7.2",
    "rimraf": "^2.6.1",
    "semantic-release": "^8.0.0",
    "tempy": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-LznqPnifl8jtQkV5ZXnQbqMLx9QROoX5d/FLteLyKy3AznLSubm5rH0LndKvf9ZI8XU8jwgLYu+wbLAEIR2PPg==",
    "shasum": "46cc2f16bdb60fe9674bbcd616bfe0f8bb35347c",
    "tarball": "https://registry.npmjs.org/@semantic-release/release-notes-generator/-/release-notes-generator-4.0.5.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "eslintConfig": {
    "extends": [
      "standard",
      "prettier"
    ],
    "plugins": [
      "prettier"
    ],
    "rules": {
      "prettier/prettier": 2
    }
  },
  "files": [
    "lib"
  ],
  "gitHead": "7345166e61fcde0a3a3af07d7a31d9d580c8cf1a",
  "homepage": "https://github.com/semantic-release/release-notes-generator#readme",
  "keywords": [
    "changelog",
    "conventional-changelog",
    "conventional-commits",
    "github",
    "publish",
    "release",
    "release-note-generator",
    "semantic-release"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "christophwitzko",
      "email": "npm@christophwitzko.com"
    },
    {
      "name": "boennemann",
      "email": "stephan@boennemann.me"
    },
    {
      "name": "semantic-release-bot",
      "email": "semantic-release@boennemann.me"
    }
  ],
  "name": "@semantic-release/release-notes-generator",
  "nyc": {
    "include": [
      "lib/**/*.js"
    ],
    "reporter": [
      "json",
      "text",
      "html"
    ],
    "all": true
  },
  "optionalDependencies": {},
  "prettier": {
    "printWidth": 120,
    "singleQuote": true,
    "bracketSpacing": false,
    "trailingComma": "es5"
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "# **release-notes-generator**\n\nCustomizable release-notes-generator plugin for [semantic-release](https://github.com/semantic-release/semantic-release) based on [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n\n[![npm](https://img.shields.io/npm/v/@semantic-release/release-notes-generator.svg)](https://www.npmjs.com/package/@semantic-release/release-notes-generator)\n[![npm](https://img.shields.io/npm/dt/@semantic-release/release-notes-generator.svg)](https://www.npmjs.com/package/@semantic-release/release-notes-generator)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/release-notes-generator.svg)](https://greenkeeper.io/)\n[![license](https://img.shields.io/github/license/semantic-release/release-notes-generator.svg)](https://github.com/semantic-release/release-notes-generator/blob/master/LICENSE)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n\n[![Travis](https://img.shields.io/travis/semantic-release/release-notes-generator.svg)](https://travis-ci.org/semantic-release/release-notes-generator)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/release-notes-generator.svg)](https://codecov.io/gh/semantic-release/release-notes-generator)\n\n## Options\n\nBy default `release-notes-generator` uses the `angular` format described in [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md).\n\nAdditionnal options can be set within the plugin definition in `package.json` to use a different commit format and to customize it:\n\n```json\n{\n  \"release\": {\n    \"generateNotes\": {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      },\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"],\n      }\n    }\n  }\n}\n```\n\n| Option       | Description                                                                                                                                                                                                                                                                                        | Default   |\n| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------- |\n| `preset`     | [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset (Possible values: `angular`, `atom`, `codemirror`, `ember`, `eslint`, `express`, `jquery`, `jscs`, `jshint`).                                                                                    | `angular` |\n| `config`     | NPM package name of a custom [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset.                                                                                                                                                                    | -         |\n| `parserOpts` | Additional [conventional-commits-writer](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-writer#options) options that will extends ones loaded by `preset` or `config`. See [Writer options](#writer-options).                        | -         |\n| `writerOpts` | Additional [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options that will extends ones loaded by `preset` or `config`. See [Parser options](#parser-options). | -         |\n\n**NOTE:** `options.config` will be overwritten by the values of preset. You should use either `preset` or `config`, but not both. Individual properties of `parserOpts` and `writerOpts` will overwrite ones loaded with `preset` or `config`.\n\n### Parser Options\n\nAllow to overwrite specific [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options. This is convenient to use a [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset with some customizations without having to create a new module.\n\nThe following example uses [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md) but will consider a commit to be a breaking change if it's body contains `BREAKING CHANGE`, `BREAKING CHANGES` or `BREAKING`. By default the [preset](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L14) checks only for `BREAKING CHANGE` and `BREAKING CHANGES`.\n\n```json\n{\n  \"release\": {\n    \"generateNotes\": {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"],\n      }\n    }\n  }\n}\n```\n\n### Writer Options\n\nAllow to overwrite specific [conventional-commits-writer](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-writer#options) options. This is convenient to use a [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset with some customizations without having to create a new module.\n\n\nThe following example uses [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md) but will sort the commits in the changelog by `subject` then `scope`. By default the [preset](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L90) sort the commits in the changelog by `scope` then `subject`.\n\n```json\n{\n  \"release\": {\n    \"generateNotes\": {\n      \"preset\": \"angular\",\n      \"writerOpts\": {\n        \"commitsSort\": [\"subject\", \"scope\"],\n      }\n    }\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "release": {
    "generateNotes": {
      "path": "./lib/index.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/semantic-release/release-notes-generator.git"
  },
  "scripts": {
    "clean": "rimraf coverage && rimraf .nyc_output",
    "cm": "git-cz",
    "codecov": "codecov -f coverage/coverage-final.json",
    "commitmsg": "commitlint -e",
    "lint": "eslint lib test",
    "precommit": "npm run lint",
    "prepush": "ava -v",
    "pretest": "npm run clean && npm run lint",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "nyc ava -v"
  },
  "version": "4.0.5"
}
