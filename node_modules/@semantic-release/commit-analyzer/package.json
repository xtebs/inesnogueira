{
  "_args": [
    [
      {
        "raw": "@semantic-release/commit-analyzer@^3.0.1",
        "scope": "@semantic-release",
        "escapedName": "@semantic-release%2fcommit-analyzer",
        "name": "@semantic-release/commit-analyzer",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/semantic-release"
    ]
  ],
  "_from": "@semantic-release/commit-analyzer@>=3.0.1 <4.0.0",
  "_id": "@semantic-release/commit-analyzer@3.0.7",
  "_inCache": true,
  "_location": "/@semantic-release/commit-analyzer",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/commit-analyzer-3.0.7.tgz_1507644573845_0.8020946190226823"
  },
  "_npmUser": {
    "name": "semantic-release-bot",
    "email": "semantic-release@boennemann.me"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@semantic-release/commit-analyzer@^3.0.1",
    "scope": "@semantic-release",
    "escapedName": "@semantic-release%2fcommit-analyzer",
    "name": "@semantic-release/commit-analyzer",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/semantic-release"
  ],
  "_resolved": "https://registry.npmjs.org/@semantic-release/commit-analyzer/-/commit-analyzer-3.0.7.tgz",
  "_shasum": "dc955444a6d3d2ae9b8e21f90c2c80c4e9142b2f",
  "_shrinkwrap": null,
  "_spec": "@semantic-release/commit-analyzer@^3.0.1",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/semantic-release",
  "author": {
    "name": "Pierre Vanduynslager"
  },
  "bugs": {
    "url": "https://github.com/semantic-release/commit-analyzer/issues"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "dependencies": {
    "@semantic-release/error": "^2.0.0",
    "conventional-changelog-angular": "^1.4.0",
    "conventional-commits-parser": "^2.0.0",
    "import-from": "^2.1.0",
    "lodash": "^4.17.4",
    "pify": "^3.0.0"
  },
  "description": "Customizable commit-analyzer plugin for semantic-release",
  "devDependencies": {
    "ava": "^0.22.0",
    "codecov": "^2.3.0",
    "commitizen": "^2.9.6",
    "conventional-changelog-atom": "^0.1.1",
    "conventional-changelog-ember": "^0.2.6",
    "conventional-changelog-eslint": "^0.2.0",
    "conventional-changelog-express": "^0.2.0",
    "conventional-changelog-jshint": "^0.2.0",
    "cz-conventional-changelog": "^2.0.0",
    "eslint": "^4.5.0",
    "eslint-config-prettier": "^2.3.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.1.1",
    "eslint-plugin-prettier": "^2.3.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "nyc": "^11.1.0",
    "prettier": "^1.7.2",
    "rimraf": "^2.6.1",
    "semantic-release": "^8.0.0",
    "tempy": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-bxCvvDsZeQp6Fvev8CdAV4pu9rEt8NOuLIFS0E8RLjKRnqQVL/fGAwpQWnRQ5hc08UZroguBNEENWpKBubWmKQ==",
    "shasum": "dc955444a6d3d2ae9b8e21f90c2c80c4e9142b2f",
    "tarball": "https://registry.npmjs.org/@semantic-release/commit-analyzer/-/commit-analyzer-3.0.7.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "eslintConfig": {
    "extends": [
      "standard",
      "prettier"
    ],
    "plugins": [
      "prettier"
    ],
    "rules": {
      "prettier/prettier": 2
    }
  },
  "files": [
    "lib"
  ],
  "gitHead": "d600a6bb1c62aed582564b1256eff7b876f8ef73",
  "homepage": "https://github.com/semantic-release/commit-analyzer#readme",
  "keywords": [
    "changelog",
    "commit-analyzer",
    "conventional-changelog",
    "conventional-commits",
    "github",
    "publish",
    "release",
    "semantic-release"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "gr2m",
      "email": "gregor@martynus.net"
    },
    {
      "name": "christophwitzko",
      "email": "npm@christophwitzko.com"
    },
    {
      "name": "boennemann",
      "email": "stephan@boennemann.me"
    },
    {
      "name": "semantic-release-bot",
      "email": "semantic-release@boennemann.me"
    }
  ],
  "name": "@semantic-release/commit-analyzer",
  "nyc": {
    "include": [
      "lib/**/*.js"
    ],
    "reporter": [
      "json",
      "text",
      "html"
    ],
    "all": true
  },
  "optionalDependencies": {},
  "prettier": {
    "printWidth": 120,
    "singleQuote": true,
    "bracketSpacing": false,
    "trailingComma": "es5"
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "# **commit-analyzer**\n\nCustomizable commit-analyzer plugin for [semantic-release](https://github.com/semantic-release/semantic-release) based on [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog)\n\n[![npm](https://img.shields.io/npm/v/@semantic-release/commit-analyzer.svg)](https://www.npmjs.com/package/@semantic-release/commit-analyzer)\n[![npm](https://img.shields.io/npm/dt/@semantic-release/commit-analyzer.svg)](https://www.npmjs.com/package/@semantic-release/commit-analyzer)\n[![Greenkeeper badge](https://badges.greenkeeper.io/semantic-release/commit-analyzer.svg)](https://greenkeeper.io/)\n[![license](https://img.shields.io/github/license/semantic-release/commit-analyzer.svg)](https://github.com/semantic-release/commit-analyzer/blob/master/LICENSE)\n[![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n\n[![Travis](https://img.shields.io/travis/semantic-release/commit-analyzer.svg)](https://travis-ci.org/semantic-release/commit-analyzer)\n[![Codecov](https://img.shields.io/codecov/c/github/semantic-release/commit-analyzer.svg)](https://codecov.io/gh/semantic-release/commit-analyzer)\n\n## Options\n\nBy default `commit-analyzer` uses the `angular` format described in [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md) and the [default rules](lib/default/release-rules.js) for release.\n\nAdditional options can be set within the plugin definition in `package.json` to use a different commit format and to customize it:\n\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        {\"type\": \"docs\", \"scope\":\"README\", \"release\": \"patch\"},\n        {\"type\": \"refactor\", \"release\": \"patch\"},\n        {\"type\": \"style\", \"release\": \"patch\"}\n      ],\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"]\n      }\n    }\n  }\n}\n```\n\n| Option         | Description                                                                                                                                                                                                                                                                                        | Default                               |\n| -------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------- |\n| `preset`       | [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset (possible values: `angular`, `atom`, `codemirror`, `ember`, `eslint`, `express`, `jquery`, `jscs`, `jshint`).                                                                                    | `angular`                             |\n| `config`       | NPM package name of a custom [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset.                                                                                                                                                                    | -                                     |\n| `releaseRules` | An external module, a path to a module or an `Array` of rules. See [Release rules](#release-rules).                                                                                                                                                                                                 | See [Release rules](#release-rules)     |\n| `parserOpts`   | Additional [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options that will extends ones loaded by `preset` or `config`. See [Parser options](#parser-options). | -                                     |\n\n**NOTE:** `config` will be overwritten by the values of `preset`. You should use either `preset` or `config`, but not both. Individual properties of `parserOpts` will overwrite ones loaded with `preset` or `config`.\n\n### Release Rules\n\nRelease rules are used when deciding if the commits since the last release warrant a new release. If you define custom release rules the [default rules](lib/default/release-rules.js) will be used if nothing matched.\n\n#### Rules definition\nThis is an `Array` of rule objects. A rule object has a `release` property and 1 or more criteria.\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": [\n        {\"type\": \"docs\", \"scope\": \"README\", \"release\": \"patch\"},\n        {\"type\": \"refactor\", \"scope\": \"/core-.*/\", \"release\": \"minor\"},\n        {\"type\": \"refactor\", \"release\": \"patch\"}\n      ]\n    }\n  }\n}\n```\n#### Rules matching\n\nEach commit will be compared with each rule and when it matches, the commit will be associated with the release type in the rule's `release` property. If a commit match multiple rules, the highest release type (`major` > `minor` > `patch`) is associated with the commit.\n\nSee [release types](lib/default/release-types.js) for the release types hierarchy.\n\nWith the previous example:\n*   Commits with `type` 'docs' and `scope` 'README' will be associated with a `patch` release.\n*   Commits with `type` 'refactor' and `scope` starting with 'core-' (i.e. 'core-ui', 'core-rules', ...) will be associated with a `minor` release.\n*   Other commits with `type` 'refactor' (without `scope` or with a `scope` not matching the regexp `/core-.*/`) will be associated with a `patch` release.\n\n#### Default rules matching\n\nIf a commit doesn't match any rule in `releaseRules` it will be evaluated against the [default release rules](lib/default/release-rules.js).\n\nWith the previous example:\n*   Commits with a breaking change will be associated with a `minor` release.\n*   Commits with `type` 'feat' will be associated with a `minor` release.\n*   Commits with `type` 'fix' will be associated with a `patch` release.\n*   Commits with `type` 'perf' will be associated with a `patch` release.\n\n#### No rules matching\n\nIf a commit doesn't match any rules in `releaseRules` or in [default release rules](lib/default/release-rules.js) then no release type will be associated with the commit.\n\nWith the previous example:\n*   Commits with `type` 'style' will not be associated with a release type.\n*   Commits with `type` 'test' will not be associated with a release type.\n*   Commits with `type` 'chore' will not be associated with a release type.\n\n#### Multiple commits\n\nIf there is multiple commits that match one or more rules, the one with the highest release type will determine the global release type.\n\nConsidering the following commits:\n*   `docs(README): Add more details to the API docs`\n*   `feat(API): Add a new method to the public API`\n\nWith the previous example the release type determine by the plugin will be `minor`.\n\n#### Specific commit properties\n\nThe properties to set in the rules will depends on the commit style chosen. For example [conventional-changelog-angular](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L9-L13) use the commit properties `type`, `scope` and `subject` but [conventional-changelog-eslint](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-eslint/index.js#L9-L12) uses `tag` and `message`.\n\nFor example with `eslint` preset:\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"eslint\",\n      \"releaseRules\": [\n        {\"tag\": \"Docs\", \"message\":\"/README/\", \"release\": \"patch\"},\n        {\"type\": \"New\", \"release\": \"patch\"}\n      ]\n    }\n  }\n}\n```\nWith this configuration:\n*   Commits with `tag` 'Docs', that contains 'README' in their header message will be associated with a `patch` release.\n*   Commits with `tag` 'New' will be associated with a `patch` release.\n*   Commits with `tag` 'Breaking' will be associated with a `major` release (per [default release rules](lib/default/release-rules.js)).\n*   Commits with `tag` 'Fix' will be associated with a `patch` release (per [default release rules](lib/default/release-rules.js)).\n*   Commits with `tag` 'Update' will be associated with a `minor` release (per [default release rules](lib/default/release-rules.js)).\n*   Commits with `tag` 'New' will be associated with a `minor` release (per [default release rules](lib/default/release-rules.js)).\n*   All other commits will not be associated with a release type.\n\n#### External package / file\n\n`releaseRules` can also reference a module, either by it's `npm` name or path:\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"releaseRules\": \"./config/release-rules.js\"\n    }\n  }\n}\n```\n```js\n// File: config/release-rules.js\nmodule.exports = [\n  {type: 'docs', scope: 'README', release: 'patch'},\n  {type: 'refactor', scope: /core-.*/, release: 'minor'},\n  {type: 'refactor', release: 'patch'},\n];\n```\n\n### Parser Options\n\nAllow to overwrite specific [conventional-commits-parser](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#conventionalcommitsparseroptions) options. This is convenient to use a [conventional-changelog](https://github.com/conventional-changelog/conventional-changelog) preset with some customizations without having to create a new module.\n\nThe following example uses [Angular convention](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/convention.md) but will consider a commit to be a breaking change if it's body contains `BREAKING CHANGE`, `BREAKING CHANGES` or `BREAKING`. By default the [preset](https://github.com/conventional-changelog/conventional-changelog/blob/master/packages/conventional-changelog-angular/index.js#L14) checks only for `BREAKING CHANGE` and `BREAKING CHANGES`.\n```json\n{\n  \"release\": {\n    \"analyzeCommits\": {\n      \"preset\": \"angular\",\n      \"parserOpts\": {\n        \"noteKeywords\": [\"BREAKING CHANGE\", \"BREAKING CHANGES\", \"BREAKING\"],\n      }\n    }\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "release": {
    "analyzeCommits": {
      "path": "./lib/index.js"
    }
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/semantic-release/commit-analyzer.git"
  },
  "scripts": {
    "clean": "rimraf coverage && rimraf .nyc_output",
    "cm": "git-cz",
    "codecov": "codecov -f coverage/coverage-final.json",
    "lint": "eslint lib test",
    "pretest": "npm run clean && npm run lint",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "nyc ava -v"
  },
  "version": "3.0.7"
}
