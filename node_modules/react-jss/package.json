{
  "_args": [
    [
      {
        "raw": "react-jss@^8.1.0",
        "scope": null,
        "escapedName": "react-jss",
        "name": "react-jss",
        "rawSpec": "^8.1.0",
        "spec": ">=8.1.0 <9.0.0",
        "type": "range"
      },
      "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/material-ui"
    ]
  ],
  "_from": "react-jss@>=8.1.0 <9.0.0",
  "_id": "react-jss@8.1.0",
  "_inCache": true,
  "_location": "/react-jss",
  "_nodeVersion": "7.10.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-jss-8.1.0.tgz_1510667596758_0.8685250319540501"
  },
  "_npmUser": {
    "name": "kof",
    "email": "oleg008@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-jss@^8.1.0",
    "scope": null,
    "escapedName": "react-jss",
    "name": "react-jss",
    "rawSpec": "^8.1.0",
    "spec": ">=8.1.0 <9.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/material-ui"
  ],
  "_resolved": "https://registry.npmjs.org/react-jss/-/react-jss-8.1.0.tgz",
  "_shasum": "7eefe3d121d31d5650118fc4f6b119e388cd43ba",
  "_shrinkwrap": null,
  "_spec": "react-jss@^8.1.0",
  "_where": "/Users/hugofnesteves/Desktop/InesNoguira/node_modules/material-ui",
  "author": {
    "name": "Dan Abramov",
    "email": "dan.abramov@me.com",
    "url": "http://github.com/gaearon"
  },
  "bugs": {
    "url": "https://github.com/cssinjs/react-jss/issues"
  },
  "dependencies": {
    "hoist-non-react-statics": "^2.3.1",
    "jss": "^9.3.2",
    "jss-preset-default": "^4.0.1",
    "prop-types": "^15.6.0",
    "theming": "^1.2.1"
  },
  "description": "Integration of JSS for react.",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-core": "^6.9.1",
    "babel-eslint": "^7.0.0",
    "babel-loader": "^6.4.1",
    "babel-plugin-istanbul": "^3.0.0",
    "babel-plugin-transform-es3-member-expression-literals": "^6.8.0",
    "babel-plugin-transform-es3-property-literals": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "common-tags": "^1.4.0",
    "cross-env": "^3.0.0",
    "es5-shim": "^4.5.9",
    "eslint": "^3.6.0",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-config-jss": "^2.3.0",
    "eslint-plugin-import": "^2.0.0",
    "eslint-plugin-jsx-a11y": "^2.2.2",
    "eslint-plugin-react": "^6.3.0",
    "expect.js": "^0.3.1",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-coverage": "^1.1.1",
    "karma-mocha": "^1.1.1",
    "karma-mocha-reporter": "^2.2.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.8.0",
    "lint-staged": "^4.0.1",
    "mocha": "^3.0.2",
    "pre-commit": "^1.1.3",
    "puppeteer": "^0.13.0",
    "react": "^16.1.0",
    "react-dom": "^16.1.0",
    "rimraf": "^2.5.4",
    "size-limit": "^0.2.0",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-AQNM9/desndTeQuvtGp2kkGT2Fy0FeiI1+jkU0ND6vGHbwPKaEnX+RqCkjzgoPdpjmfTa70y8RMp3rao9w25Eg==",
    "shasum": "7eefe3d121d31d5650118fc4f6b119e388cd43ba",
    "tarball": "https://registry.npmjs.org/react-jss/-/react-jss-8.1.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "deeb641b89ad39ec0b3b0a6a40acad391816a4a1",
  "homepage": "https://github.com/cssinjs/react-jss",
  "keywords": [
    "react",
    "style",
    "css",
    "stylesheet",
    "jss",
    "hoc",
    "decorator"
  ],
  "license": "MIT",
  "lint-staged": {
    "src/**/*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "iamstarkov",
      "email": "iamstarkov@gmail.com"
    },
    {
      "name": "kof",
      "email": "oleg008@gmail.com"
    }
  ],
  "name": "react-jss",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.13"
  },
  "pre-commit": "lint:staged",
  "readme": "# React integration of JSS\n\n[![Gitter](https://badges.gitter.im/JoinChat.svg)](https://gitter.im/cssinjs/lobby)\n[![Build Status](https://travis-ci.org/cssinjs/react-kss.svg?branch=master)](https://travis-ci.org/cssinjs/react-jss)\n\n<a target='_blank' rel='nofollow' href='https://app.codesponsor.io/link/yHSURRBaaXYK5KyrNZXn4iHe/cssinjs/react-jss'>\n  <img alt='Sponsor' width='888' height='68' src='https://app.codesponsor.io/embed/yHSURRBaaXYK5KyrNZXn4iHe/cssinjs/react-jss.svg' />\n</a>\n\nReact-JSS provides components for [JSS](https://github.com/cssinjs/jss) as a layer of abstraction. JSS and [presets](https://github.com/cssinjs/jss-preset-default) are already built in! Try it out on a [playground](https://codesandbox.io/s/j3l06yyqpw).\n\nThe benefits are:\n\n- Theming support out of the box.\n- Critical CSS extraction.\n- Lazy evaluation - sheet is created only when component will mount.\n- Auto attach/detach - sheet will be rendered to the DOM when component is about to mount and will be removed when no element needs it.\n- A Style Sheet gets shared between all elements.\n\n## Table of Contents\n\n* [Install](#install)\n* [Usage](#usage)\n  * [Basic](#basic)\n  * [Theming](#theming)\n  * [Server-side rendering](#server-side-rendering)\n  * [Reuse styles in different components](#reuse-styles-in-different-components)\n  * [The inner component](#the-inner-component)\n  * [Custom setup](#custom-setup)\n  * [Decorators](#decorators)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Install\n\n```\nnpm install --save react-jss\n```\n\n## Usage\n\nReact-JSS wraps your component with an [higher-order component](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750).\nIt injects `classes` prop, which is a simple map of rule names and generated class names. It can act both as a simple wrapping function and as a [ES7 decorator](https://github.com/wycats/javascript-decorators)\n\n### Example\n\nTry it out on [playground](https://codesandbox.io/s/j3l06yyqpw).\n\n```javascript\nimport React from 'react'\nimport injectSheet from 'react-jss'\n\nconst styles = {\n  button: {\n    background: props => props.color\n  },\n  label: {\n    fontWeight: 'bold'\n  }\n}\n\nconst Button = ({classes, children}) => (\n  <button className={classes.button}>\n    <span className={classes.label}>\n      {children}\n    </span>\n  </button>\n)\n\nexport default injectSheet(styles)(Button)\n```\n\n### Theming\n\nThe idea is that you define theme, wrap your application with `ThemeProvider` and pass the `theme` to `ThemeProvider`. ThemeProvider will pass it over `context` to your styles creator function and to your props. After that you may change your theme, and all your components will get new theme automatically.\n\nUnder the hood `react-jss` uses unified CSSinJS `theming` solution for React. You can find [detailed docs in its repo](https://github.com/iamstarkov/theming).\n\nUsing `ThemeProvider`:\n\n* It has `theme` prop which should be an `object` or `function`:\n  * If it is an `Object` and used in a root `ThemeProvider` then it's intact and being passed down the react tree.\n  * If it is `Object` and used in a nested `ThemeProvider` then it's being merged with theme from a parent `ThemeProvider` and passed down the react tree.\n  * If it is `Function` and used in a nested `ThemeProvider` then it's being applied to the theme from a parent `ThemeProvider`. If result is an `Object` it will be passed down the react tree, throws otherwise.\n* `ThemeProvider` as every other component can render only single child, because it uses `React.Children.only` in render and throws otherwise.\n* [Read more about `ThemeProvider` in `theming`'s documentation.](https://github.com/iamstarkov/theming#themeprovider)\n\n```javascript\nimport React from 'react'\nimport injectSheet, {ThemeProvider} from 'react-jss'\n\nconst Button = ({classes, children}) => (\n  <button className={classes.button}>\n    <span className={classes.label}>\n      {children}\n    </span>\n  </button>\n)\n\nconst styles = theme => ({\n  button: {\n    background: theme.colorPrimary\n  },\n  label: {\n    fontWeight: 'bold'\n  }\n})\n\nconst StyledButton = injectSheet(styles)(Button)\n\nconst theme = {\n  colorPrimary: 'green'\n}\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <StyledButton>I am a button with green background</StyledButton>\n  </ThemeProvider>\n)\n```\n\nIn case you need to access the theme but not render any CSS, you can also use `withTheme`. It is a Higher-order Component factory which takes a `React.Component` and maps the theme object from context to props. [Read more about `withTheme` in `theming`'s documentation.](https://github.com/iamstarkov/theming#withthemecomponent)\n\n```javascript\nimport React from 'react'\nimport injectSheet, {withTheme} from 'react-jss'\n\nconst Button = withTheme(({theme}) => (\n  <button>I can access {theme.colorPrimary}</button>\n))\n```\n\n_Namespaced_ themes can be used so that a set of UI components should not conflict with another set of UI components from a different library using also ```react-jss```.\n\n```javascript\nimport {createTheming} from 'react-jss'\n\n// Creating a namespaced theming object.\nconst theming = createTheming('__MY_NAMESPACED_THEME__')\n\nconst {ThemeProvider: MyThemeProvider} = theming\n\nconst styles = theme => ({\n  button: {\n    background: theme.colorPrimary\n  }\n})\n\nconst theme = {\n  colorPrimary: 'green'\n}\n\nconst Button = ({classes, children}) => (\n  <button className={classes.button}>\n    {children}\n  </button>\n)\n\n// Passing namespaced theming object inside injectSheet options.\nconst StyledButton = injectSheet(styles, { theming })(Button)\n\n// Using namespaced ThemeProviders - they can be nested in any order\nconst App = () => (\n  <OtherLibraryThemeProvider theme={otherLibraryTheme}>\n    <OtherLibraryComponent />\n    <MyThemeProvider theme={theme}>\n      <StyledButton>Green Button</StyledButton>\n    </MyThemeProvider>\n  <OtherLibraryThemeProvider>\n)\n```\n\n### Server-side rendering\n\nAfter the application is mounted, you should remove the style tag used critical CSS rendered server-side.\n\n```javascript\nimport {renderToString} from 'react-dom/server'\nimport {JssProvider, SheetsRegistry} from 'react-jss'\nimport MyApp from './MyApp'\n\nexport default function render(req, res) {\n  const sheets = new SheetsRegistry()\n\n  const body = renderToString(\n    <JssProvider registry={sheets}>\n      <MyApp />\n    </JssProvider>\n  )\n\n  // Any instances of `injectSheet` within `<MyApp />` will have gotten sheets\n  // from `context` and added their Style Sheets to it by now.\n\n  return res.send(renderToString(\n    <html>\n      <head>\n        <style type=\"text/css\">\n          {sheets.toString()}\n        </style>\n      </head>\n      <body>\n        {body}\n      </body>\n    </html>\n  ))\n}\n```\n\n### Reuse styles in different components\n\nIn order to reuse the same styles __and__ the same generated style sheet between 2 entirely different and unrelated components, we suggest to extract a renderer component into a separate one and reuse it.\n\n```javascript\nconst styles = {\n  button: {\n    color: 'red'\n  }\n}\nconst RedButton = injectSheet(styles)(({classes, children}) => (\n  <button className={classes.button}>{children}</button>\n))\n\nconst SomeComponent1 = () => (\n  <div>\n    <RedButton>My red button 1</RedButton>\n  </div>\n)\n\nconst SomeComponent2 = () => (\n  <div>\n    <RedButton>My red button 2</RedButton>\n  </div>\n)\n```\n\nAlternatively you can create own Style Sheet and use the `composes` feature. Also you can mix in a common styles object, but take into account that it grow the overall CSS size.\n\n### The inner component\n\n```es6\nconst InnerComponent = () => null\nconst StyledComponent = injectSheet(styles, InnerComponent)\nconsole.log(StyledComponent.InnerComponent) // Prints out the inner component.\n```\n\n### Custom setup\n\nIf you want to specify a JSS version and plugins to use, you should create your [own Jss instance](https://github.com/cssinjs/jss/blob/master/docs/js-api.md#create-an-own-jss-instance), [setup plugins](https://github.com/cssinjs/jss/blob/master/docs/setup.md#setup-with-plugins) and pass it to `JssProvider`.\n\n```javascript\nimport {create as createJss} from 'jss'\nimport {JssProvider} from 'react-jss'\nimport vendorPrefixer from 'jss-vendor-prefixer'\n\nconst jss = createJss()\njss.use(vendorPrefixer())\n\nconst Component = () => (\n  <JssProvider jss={jss}>\n    <App />\n  </JssProvider>\n)\n```\n\nYou can also access the Jss instance being used by default.\n\n```javascript\nimport {jss} from 'react-jss'\n```\n\n### Multi-tree setup\n\nIn case you render multiple react rendering trees in one application, you will get class name collisions, because every JssProvider rerender will reset the class names generator. If you want to avoid this, you can share the class names generator between multiple JssProvider instances.\n\n__Note__: in case of SSR, make sure to create a new generator for __each__ request. Otherwise class names will become indeterministic and at some point you may run out of max safe integer numbers.\n\n```javascript\nimport {createGenerateClassName, JssProvider} from 'react-jss'\n\nconst generateClassName = createGenerateClassName()\n\nconst Component = () => (\n  <div>\n    <JssProvider generateClassName={generateClassName}>\n      <App1 />\n    </JssProvider>\n    <JssProvider generateClassName={generateClassName}>\n      <App2 />\n    </JssProvider>\n  </div>\n)\n```\n\nYou can also additionally use `classNamePrefix` prop in order to add the app/subtree name to each class name.\nThis way you can see which app generated a class name in the DOM view.\n\n```javascript\nimport {JssProvider} from 'react-jss'\n\nconst Component = () => (\n  <div>\n    <JssProvider classNamePrefix=\"App1-\">\n      <App1 />\n    </JssProvider>\n    <JssProvider classNamePrefix=\"App2-\">\n      <App2 />\n    </JssProvider>\n  </div>\n)\n```\n\n### Decorators\n\n_Beware that [decorators are stage-2 proposal](https://tc39.github.io/proposal-decorators/), so there are [no guarantees that decorators will make its way into language specification](https://tc39.github.io/process-document/). Do not use it in production. Use it at your own risk and only if you know what you are doing._\n\nYou will need [babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy).\n\n```javascript\nimport React, {Component} from 'react'\nimport injectSheet from 'react-jss'\n\nconst styles = {\n  button: {\n    backgroundColor: 'yellow'\n  },\n  label: {\n    fontWeight: 'bold'\n  }\n}\n\n@injectSheet(styles)\nexport default class Button extends Component {\n  render() {\n    const {classes, children} = this.props\n    return (\n      <button className={classes.button}>\n        <span className={classes.label}>\n          {children}\n        </span>\n      </button>\n    )\n  }\n}\n```\n\n## Injection order\n\nStyle tags are injected in the exact same order as the `injectSheet()` invocation.\nSource order specificity is higher the lower style tag is in the tree, therefore you should call `injectSheet` of components you want to override first.\n\nExample\n\n```js\n// Will render labelStyles first.\nconst Label = injectSheet(labelStyles)(({children}) => <label>{children}</label>)\nconst Button = injectSheet(buttonStyles)(() => <button><Label>my button</Label></button>)\n```\n\n## Whitelist injected props\n\nBy default \"classes\" and \"theme\" are going to be injected to the child component over props. Property `theme` is only passed when you use a function instead of styles object.\nIf you want to whitelist some of them, you can now use option `inject`. For e.g. if you want to access the StyleSheet instance, you need to pass `{inject: ['sheet']}` and it will be available as `props.sheet`.\n\nAll user props passed to the HOC will be still forwarded as usual.\n\n```js\n\n// Only `classes` prop will be passed by the ReactJSS HOC now. No `sheet` or `theme`.\nconst Button = injectSheet(styles, {inject: ['classes', 'sheet']})(\n  ({classes}) => <button>My button</button>\n)\n```\n\n## Contributing\n\nSee our [contribution guidelines](./contributing.md).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cssinjs/react-jss.git"
  },
  "scripts": {
    "all": "npm run lint && npm run test && npm run build && npm run size",
    "build": "npm run clean && npm run build:lib && npm run build:dist",
    "build:dist": "npm run build:dist:max && npm run build:dist:min",
    "build:dist:max": "cross-env NODE_ENV=development webpack src/index.js dist/react-jss.js",
    "build:dist:min": "cross-env NODE_ENV=production webpack src/index.js dist/react-jss.min.js",
    "build:lib": "babel src --out-dir lib --ignore src/tests",
    "clean": "rimraf {lib,dist,tests,tmp}/*",
    "lint": "eslint ./src",
    "lint:staged": "lint-staged",
    "prepublishOnly": "npm run all",
    "preversion": "npm run size",
    "size": "size-limit 22KB dist/react-jss.js",
    "test": "cross-env NODE_ENV=test karma start --single-run ",
    "test:watch": "cross-env NODE_ENV=test karma start"
  },
  "version": "8.1.0"
}
